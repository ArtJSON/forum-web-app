import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { trpc } from "../../utils/trpc";
import { Modal } from "../../components/Modal/Modal";

import { Location } from "../../components/Location/Location";
import { PostSection } from "../../components/PostSection/PostSection";
import { SearchBanner } from "../../components/SearchBanner/SearchBanner";
import styles from "../../styles/Page.module.scss";
import { useSession } from "next-auth/react";
import { useState } from "react";

interface CategoryListingProps {
  categoryId: string;
}

const CategoryListing: NextPage<CategoryListingProps> = ({
  categoryId,
}: CategoryListingProps) => {
  const [modalOpen, setModalOpen] = useState(true);

  const { data: session } = useSession();

  const response = trpc.post.getAllForCategoryId.useQuery({
    categoryId: categoryId,
  }).data;

  if (!response) {
    return <></>;
  }

  return (
    <>
      <Head>
        <title>{response.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal onClose={() => setModalOpen(false)} isOpen={modalOpen}>
        dasdsa
      </Modal>
      <SearchBanner />
      <Location paths={[{ label: response.name, url: "/category" }]} />
      <div className={styles.maxWidthContainer}>
        <PostSection title={response.name} posts={response.posts} />
      </div>
    </>
  );
};

export default CategoryListing;

export const getServerSideProps: GetServerSideProps<
  CategoryListingProps
> = async (context) => {
  return {
    props: {
      categoryId: `${context.query.categoryId}`,
    },
  };
};
